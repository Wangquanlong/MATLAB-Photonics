function createCheckBoxTree

import javax.swing.tree.*;
import javax.swing.*;
import com.jidesoft.swing.CheckBoxTree.*;
import com.jidesoft.swing.*;


%Boolean variable to indicate recent change in checkbox, to differentiate
%events from mouse press selections
global SimViewer_g

%Process directory to determine node name
SimViewer_g.rootDirectory = regexprep(SimViewer_g.rootDirectory, '\', '/');
k = strfind(SimViewer_g.rootDirectory, '/');
node = SimViewer_g.rootDirectory(k(length(k))+1:length(SimViewer_g.rootDirectory));

%Define rootNode for folder tree 
rootNode = processHierarchy(SimViewer_g.rootDirectory, node);

% define tree model
treeModel = DefaultTreeModel( rootNode );

% checkbox tree
SimViewer_g.tree = com.jidesoft.swing.CheckBoxTree( treeModel );

% define tree selection model
SimViewer_g.treeSelectionModel = SimViewer_g.tree.getCheckBoxTreeSelectionModel();

% create handle to java object callback properties
hTreeSelectionModel = handle( SimViewer_g.treeSelectionModel, 'CallbackProperties' );

% set appropriate callback
set( hTreeSelectionModel, 'ValueChangedCallback', @selectionChanged_cb );
set( handle(SimViewer_g.tree, 'CallbackProperties'), 'MousePressedCallback', @mousePressed_cb ); 

% place tree on panel in figure
old_units = get(SimViewer_g.main_h.folderTreePanel, 'Units');
set(SimViewer_g.main_h.folderTreePanel, 'Units', 'pixels');
panelPos = get(SimViewer_g.main_h.folderTreePanel, 'Position');
set(SimViewer_g.main_h.folderTreePanel, 'Units', old_units);
panelRatio = panelPos(3)/panelPos(4);
width = .95*panelPos(3);
height = (1 - .05*(panelRatio*2))*panelPos(4);
left = (panelPos(3) - width)/2;
bottom = (panelPos(4) - height)/4;

jScrollPane = com.mathworks.mwswing.MJScrollPane(SimViewer_g.tree);
[jComp,hc ] = javacomponent(jScrollPane,[left, bottom, width, height],SimViewer_g.main_h.folderTreePanel);


    function selectionChanged_cb( varargin )
        %Handler for selection changed
        
        %Get array of currently selected paths
%         TreePath = SimViewer_g.treeSelectionModel.getSelectionPaths;
%         
%         %Check if selection change was generated by a recently unchecked
%         %checkbox
%         switch SimViewer_g.uncheck
%             
%             case false
%                 
%                 %Code to idenify recently checked box to seperate thse events from
%                 %mouse press selection events
%                 SimViewer_g.recentlyChecked = true;
%                 
%                 %Update Simulation Groups, indicate that this is a checkbox press
%                 updateSimGroups(TreePath, true)
%                 
%                 
%             case true
%                 
%                 %Reset uncheck flag
%                 SimViewer_g.uncheck = false;
%                 
%         end

        %Inidcate checkbox has recently changed
        SimViewer_g.recentlyChecked = true;


    end


    function mousePressed_cb( hTree, eventData )
        %Handler for mouse press on tree
        
        %Check if selection change was generated by a recently unchecked
        %checkbox
        switch SimViewer_g.uncheck
            
            case false
                
                %Check if checkbox was recently changed
                switch SimViewer_g.recentlyChecked
                    
                    case true
                        
                        %Update recently checked flag
                        SimViewer_g.recentlyChecked = false;
                        
                        TreePath = SimViewer_g.treeSelectionModel.getSelectionPaths;
                        
                        %Update Simulation Groups, indicate that this is a checkbox press
                        updateSimGroups(TreePath, true)
                        
                    case false %Handle mouse selection
                        
                        %Check which button is presed
                        if (eventData.getButton == 1)  % left click is button 1
                            % Get the clicked node
                            clickX = eventData.getX;
                            clickY = eventData.getY;
                            jtree = eventData.getSource;
                            
                            %Path for selected entry, if no entry selected, []
                            TreePath = jtree.getPathForLocation(clickX, clickY);
                            
                            %Update Simulation Groups, indicate that this is not a
                            %checkbox press
                            if(~isempty(TreePath))
                                updateSimGroups(TreePath, false)
                            end
                            
                        end
                end
                
            case true
                SimViewer_g.uncheck = false;
                return;
                
                
        end
        
    end

    function node = processHierarchy(directory, parentNode)
        %This function processes a file tree recursively, adding nodes and
        %respective children to form a root node for a java tree
        import javax.swing.tree.*
        
        %Create parent node
        node = DefaultMutableTreeNode(parentNode);
        
        %Set node count to 1
        nodeCount = 1;
        
        %Get listing for current directory
        listing = dir(directory);
        
        %Filter out '.' and '..' directory entries
        listing = listing(~strcmp({listing.name}, {'.'}) & ~strcmp({listing.name}, {'..'}));
        
        %Loop over listing
        for k = 1:length(listing)
            
            %Check if current listing is a directory
            if(listing(k).isdir)
                %Process any subdirectories/files as children
                child =  processHierarchy([directory '/' listing(k).name], listing(k).name);
            else
                
                %Create custom java class
                treeNodeUserObj = java_treeNodeUserClass;
                
                %Set node name
                treeNodeUserObj.nodeName = listing(k).name;
                
                %Set node index
                treeNodeUserObj.nodeIndex = nodeCount;
                
                child = DefaultMutableTreeNode(listing(k).name);
                
            end
            %Add node as child
            node.add(child);
            
            %Increment node count
            nodeCount = nodeCount + 1;
            
        end
        
    end

end
        
  